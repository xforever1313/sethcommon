import SCons.Defaults
import SCons
from SCons.Util import unique
import stat
import os
import sys
import subprocess
import glob
import shutil
from copy import deepcopy

baseDir = os.path.abspath("../../")
sys.path.append(baseDir) #Get globals
from Globals import *
from SConstructGlobals import parseArguments

armBuild = parseArguments(ARGUMENTS)

from SConstructGlobals import *

###
# Files to compile
###

###include paths:
includePaths = [includeDir]
testIncludePaths = [os.path.join(testDir, includeDir)]

###Source Files
#if a new directory gets added, add to here
sourceDirectories = [srcDir]
#if a new test directory gets added, add to here
sourceTestDirectories = [testDir, os.path.join(testDir, srcDir)]

sourceFiles = []
sourceTestFiles = []

#Add all .cpp files
for dir in sourceDirectories:
    sourceFiles += glob.glob(os.path.join(dir, "*.cpp"))

for dir in sourceTestDirectories:
    sourceTestFiles += glob.glob(os.path.join(dir, "*.cpp"))

coverageFiles = deepcopy(sourceFiles)
    
###Libs
libs = []
testLibs = ["boost_thread"] + libs
if (sys.platform != "win32"):
    testLibs += ["rt", 'pthread', 'c']
###libPath
libPath = []

Help(
'''
SConstruct file for Skyvo OS project

Targets:
    debug          Builds the project for Debug lib (Default)
    release        Builds the project for Release lib
    create_lib     Builds both the debug and release libs
    doxygen        Builds the doxygen documentation
    unit_test      Builds the project for Unit Tests
    run_test       Builds and runs the Unit Tests and memcheck and coverage
'''
)

###
# Environment creation
###

#Make common environment
envBase = createBaseEnvironment(baseDir, armBuild)

#Debug Environment
debugEnvironment = createDebugEnvironment(envBase, includePaths, libs, libPath)

#Release Environment
releaseEnvironment = createReleaseEnvironment(envBase, includePaths, libs, libPath)

#Unit test environment
testEnvironment = createUnitTestEnvironment(envBase, includePaths + testIncludePaths, testLibs, libPath)

#Doxygen
doxygenFiles = sourceFiles + sourceTestFiles + glob.glob(os.path.join(includeDir, "*h")) + glob.glob(os.path.join(testDir, includeDir, "*h"))

###
# Test outputs
###
createTestOutputFolder(envBase)
    
#make unEditableFile.txt and uneditableDir unwritable, and unReadableFile.txt unreadable
try:
    os.chmod(os.path.join(".", "Test", "unEditableFile.txt"), stat.S_IREAD)
    os.chmod(os.path.join(".", "Test", "unReadableFile.txt"), 0)
except OSError:
    pass

###
# Targets
###

debugTarget = createStaticLib(debugEnvironment, "SkyvoOS-d", sourceFiles)
releaseTarget = createStaticLib(releaseEnvironment, "SkyvoOS", sourceFiles)
(unitTestTarget, runTestTarget) = createUnitTestExe(testEnvironment, sourceFiles + sourceTestFiles, coverageFiles, armBuild)
doxygenTarget = createDoxygenTarget(envBase, doxygenFiles)

Alias("debug", debugTarget)
Alias("release", releaseTarget)
Alias ("create_lib", ["debug", "release"])
Alias("doxygen", doxygenTarget)
Alias("unit_test", unitTestTarget)
Alias("run_unit_test", runTestTarget)
Alias("run_test", [unitTestTarget, runTestTarget])

#used by auto build
if (armBuild):
    print("WARNING! Unit tests are not going to be run on an ARM nightly/delta build")
    Alias ("nightly", ["debug", "release", "doxygen", "unit_test"])
    Alias ("delta", ["release", "unit_test"])
else:
    Alias ("nightly", ["debug", "release", "doxygen", "run_test"])
    Alias ("delta", ["release", "run_test"])

Default(["debug"])
