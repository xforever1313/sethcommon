import SCons.Defaults
import SCons
from SCons.Util import unique
import stat
import os
import sys
import subprocess
import glob
import shutil
from copy import deepcopy

baseDir = os.path.abspath("../../")
sys.path.append(baseDir) #Get globals
from Globals import *
from SkyvoCommonGlobals import *
from SConstructGlobals import *

#Make common environment
projectName = "Common Classes"
targetFlags = CREATE_LIB_TARGET | DEBUG_RELEASE_LIB_TARGET | DOXYGEN_TARGET | CPP_CHECK_TARGET | TESTING_TARGET | NET_BEANS_TARGET
envBase = createBaseEnvironment(baseDir, baseDir, projectName, targetFlags, ARGUMENTS)

osPath = getSkyvoOSPath(baseDir)

###
# Files to compile
###

###include paths:
includePaths = [includeDir, os.path.join(osPath, includeDir), getDateVersionPath(baseDir)]
testIncludePaths = [os.path.join(testDir, includeDir)]

###Source Files
dateVersionFile = (os.path.join(srcDir, 'SkyvoCommonDateVersion.cpp'))
sourceFiles = filterSourceFiles(glob.glob(os.path.join(srcDir, "*.cpp")) +
                                glob.glob(os.path.join(srcDir, "*/*.cpp")), [dateVersionFile])
sourceTestFiles = glob.glob(os.path.join(testDir, "*.cpp")) + glob.glob(os.path.join(testDir, "*/*.cpp")) + [getTestMain(baseDir)]
coverageFiles = deepcopy(sourceFiles + [dateVersionFile])

###Libs
libs = [] #Only need debug lib for unit tests.
testLibs = ['SkyvoOS-d', "pthread"] + libs
if (sys.platform != "win32" and sys.platform != "darwin"):
    testLibs += ["rt", 'c']
###libPath
libPath = [os.path.join(osPath, libDir, envBase['SYSTEM'], debugDir)]

Help(getHelpMessage(envBase))

###
# Environment creation
###

#Debug Environment
debugEnvironment = createDebugEnvironment(envBase, includePaths, libs, libPath)

#Release Environment
releaseEnvironment = createReleaseEnvironment(envBase, includePaths, libs, libPath)

#Unit test environment
testEnvironment = createUnitTestEnvironment(envBase, includePaths + testIncludePaths, testLibs, libPath)

#Doxygen
doxygenFiles = [dateVersionFile] + sourceFiles + sourceTestFiles + glob.glob(os.path.join(includeDir, "*h")) + glob.glob(os.path.join(testDir, includeDir, "*h"))

###
# Test outputs
###
createTestOutputFolder(envBase)

###
# Targets
###

debugTarget = createStaticLib(debugEnvironment, "SkyvoCommon-d", getCompiledObjectsWithDateVersionObject(debugEnvironment,
                                                                                                         sourceFiles,
                                                                                                         dateVersionFile,
                                                                                                         ARGUMENTS))
releaseTarget = createStaticLib(releaseEnvironment, "SkyvoCommon", getCompiledObjectsWithDateVersionObject(releaseEnvironment,
                                                                                                           sourceFiles,
                                                                                                           dateVersionFile,
                                                                                                           ARGUMENTS))
(unitTestTarget, runTestTarget) = createUnitTestExe(testEnvironment,
                                                    getCompiledObjectsWithDateVersionObject(testEnvironment,
                                                                                            sourceFiles + sourceTestFiles,
                                                                                            dateVersionFile,
                                                                                            ARGUMENTS),
                                                    coverageFiles)

doxygenTarget = createDoxygenTarget(envBase, doxygenFiles)
cppCheckTarget = createCppCheckTarget(releaseEnvironment, coverageFiles)
netBeansTarget = generateNetBeansFiles(envBase, testIncludePaths + includePaths, "")

Alias("debug_lib", debugTarget)
Alias("release_lib", releaseTarget)
Alias ("create_lib", [debugTarget, releaseTarget])
Alias("doxygen", doxygenTarget)
Alias("net_beans", netBeansTarget)
Alias("cpp_check", cppCheckTarget)
Alias("unit_test", unitTestTarget)
Alias("run_unit_test", runTestTarget)
Alias("run_test", [unitTestTarget, cppCheckTarget, runTestTarget])

Alias ("nightly", [debugTarget, releaseTarget, doxygenTarget, cppCheckTarget, runTestTarget])
Alias ("delta", [debugTarget, releaseTarget, cppCheckTarget, runTestTarget])

Default([debugTarget])

