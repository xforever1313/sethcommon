import SCons.Defaults
import SCons
from SCons.Util import unique
import stat
import os
import sys
import subprocess
import glob
import shutil
from copy import deepcopy

baseDir = os.path.abspath("../../")
sys.path.append(baseDir) #Get globals
from Globals import *
from SethCommonGlobals import *
from SConstructGlobals import *

#Make common environment
projectName = "SethOS"
targetFlags = CREATE_LIB_TARGET | DEBUG_RELEASE_LIB_TARGET | DOXYGEN_TARGET | CPP_CHECK_TARGET | TESTING_TARGET | PROJECT_TARGET
envBase = createBaseEnvironment(baseDir, baseDir, projectName, targetFlags, ARGUMENTS)

###
# Files to compile
###

###include paths:
includePaths = [includeDir, getDateVersionPath(baseDir), os.path.join(getCommonClassesPath(baseDir), includeDir)]
testIncludePaths = [os.path.join(testDir, includeDir)]

###Source Files
dateVersionFile = (os.path.join(srcDir, 'OSDateVersion.cpp'))
sourceFiles = filterSourceFiles(glob.glob(os.path.join(srcDir, "*.cpp")) +
                                glob.glob(os.path.join(srcDir, "*/*.cpp")), [dateVersionFile])
sourceTestFiles = glob.glob(os.path.join(testDir, "*.cpp")) + glob.glob(os.path.join(testDir, "*/*.cpp")) + [getTestMain(baseDir)]
coverageFiles = deepcopy(sourceFiles + [dateVersionFile])

###Libs
libs = []
testLibs = [] + libs
if (not envBase['ASM_JS_BUILD'] and not envBase['MSVC_BUILD']):
    testLibs += ["pthread"]

###libPath
libPath = []

Help(getHelpMessage(envBase))

###
# Environment creation
###

#Debug Environment
debugEnvironment = createDebugEnvironment(envBase, includePaths, libs, libPath)

#Release Environment
releaseEnvironment = createReleaseEnvironment(envBase, includePaths, libs, libPath)

#Unit test environment
testEnvironment = createUnitTestEnvironment(envBase, includePaths + testIncludePaths, testLibs, libPath)

#Remove debug_new from shared builds.  On windows this causes stuff
#to crash for some reason.  To check for memory leaks, use static
#Builds.
if (envBase['SHARED_BUILD']):
    if ('debug_new') in testEnvironment['LIBS']:
        testEnvironment['LIBS'].remove('debug_new')

#Doxygen
doxygenFiles = [dateVersionFile] + sourceFiles + sourceTestFiles + glob.glob(os.path.join(includeDir, "*h")) + glob.glob(os.path.join(testDir, includeDir, "*h"))

###
# Test outputs
###
createTestOutputFolder(envBase)

#make unEditableFile.txt and uneditableDir unwritable, and unReadableFile.txt unreadable
try:
    os.chmod(os.path.join(".", "Test", "unEditableFile.txt"), stat.S_IREAD)
    os.chmod(os.path.join(".", "Test", "unReadableFile.txt"), 0)
except OSError:
    pass

###
# Targets
###

debugTarget = createStaticLib(debugEnvironment, "SethOS-d", getCompiledObjectsWithDateVersionObject(debugEnvironment, sourceFiles, dateVersionFile, ARGUMENTS))
releaseTarget = createStaticLib(releaseEnvironment, "SethOS", getCompiledObjectsWithDateVersionObject(releaseEnvironment, sourceFiles, dateVersionFile, ARGUMENTS))
(unitTestTarget, runTestTarget) = createUnitTestExe(testEnvironment, getCompiledObjectsWithDateVersionObject(testEnvironment, sourceFiles + sourceTestFiles, dateVersionFile, ARGUMENTS), coverageFiles)
doxygenTarget = createDoxygenTarget(envBase, doxygenFiles)
cppCheckTarget = createCppCheckTarget(releaseEnvironment, coverageFiles)

otherIncludeFiles = [os.path.join(getCppUTestPath(baseDir), includeDir), os.path.join(getGMockPath(baseDir), includeDir)]
(netBeansTarget, vsTarget) = createProjectTargets(envBase, testEnvironment['CPPPATH'] + otherIncludeFiles, "")

Alias("debug_lib", debugTarget)
Alias("release_lib", releaseTarget)
Alias ("create_lib", [debugTarget, releaseTarget])
Alias("doxygen", doxygenTarget)
Alias("cpp_check", cppCheckTarget)
Alias("unit_test", unitTestTarget)
Alias("run_unit_test", runTestTarget)
Alias("run_test", [unitTestTarget, cppCheckTarget, runTestTarget])

Alias ("nightly", [debugTarget, releaseTarget, doxygenTarget, cppCheckTarget, runTestTarget, netBeansTarget, vsTarget])
Alias ("delta", [debugTarget, releaseTarget, cppCheckTarget, runTestTarget])

Default([debugTarget])
