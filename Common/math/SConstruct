import SCons.Defaults
import SCons
from SCons.Util import unique
import stat
import os
import sys
import subprocess
import glob
import shutil
from copy import deepcopy

baseDir = os.path.abspath("../../")
sys.path.append(baseDir) #Get globals
from Globals import *
from SethCommonGlobals import *
from SConstructGlobals import *

#Make common environment
projectName = "SMath"
targetFlags = CREATE_LIB_TARGET | DEBUG_RELEASE_LIB_TARGET | DOXYGEN_TARGET | CPP_CHECK_TARGET | TESTING_TARGET | PROJECT_TARGET
envBase = createBaseEnvironment(baseDir, baseDir, projectName, targetFlags, ARGUMENTS)

###
# Files to compile
###

###include paths:
includePaths = [includeDir, getDateVersionPath(baseDir)]
testIncludePaths = [os.path.join(testDir, includeDir)]

###Source Files
dateVersionFile = (os.path.join(srcDir, 'MathDateVersion.cpp'))
sourceFiles = filterSourceFiles(glob.glob(os.path.join(srcDir, "*.cpp")) +
                                glob.glob(os.path.join(srcDir, "*/*.cpp")), [dateVersionFile])
sourceTestFiles = glob.glob(os.path.join(testDir, "*.cpp")) + glob.glob(os.path.join(testDir, "*/*.cpp")) + [getTestMain(baseDir)]
coverageFiles = deepcopy(sourceFiles + [dateVersionFile])

###Libs
libs = []
testLibs = [] + libs

###libPath
libPath = []

Help(getHelpMessage(envBase))

###
# Environment creation
###

#Debug Environment
debugEnvironment = createDebugEnvironment(envBase, includePaths, libs, libPath)

#Release Environment
releaseEnvironment = createReleaseEnvironment(envBase, includePaths, libs, libPath)

#Unit test environment
testEnvironment = createUnitTestEnvironment(envBase, includePaths + testIncludePaths, testLibs, libPath)

###
# Targets
###

debugTarget = createLib(debugEnvironment, "SMath-d", getCompiledObjectsWithDateVersionObject(debugEnvironment,
                                                                                                         sourceFiles,
                                                                                                         dateVersionFile,
                                                                                                         ARGUMENTS))
releaseTarget = createLib(releaseEnvironment, "SMath", getCompiledObjectsWithDateVersionObject(releaseEnvironment,
                                                                                                           sourceFiles,
                                                                                                           dateVersionFile,
                                                                                                           ARGUMENTS))
(unitTestTarget, runTestTarget) = createUnitTestExe(testEnvironment,
                                                    getCompiledObjectsWithDateVersionObject(testEnvironment,
                                                                                            sourceFiles + sourceTestFiles,
                                                                                            dateVersionFile,
                                                                                            ARGUMENTS),
                                                    coverageFiles)

cppCheckTarget = createCppCheckTarget(releaseEnvironment, coverageFiles)

otherIncludeFiles = [os.path.join(getCppUTestPath(baseDir), includeDir), os.path.join(getGMockPath(baseDir), includeDir)]
(netBeansTarget, vsTarget, codeBlocksTarget) = createProjectTargets(envBase, testEnvironment['CPPPATH'] + otherIncludeFiles, "")
doxygenTarget = createDoxygenTarget(envBase, testEnvironment['CPPPATH'] + otherIncludeFiles, 'Common Math Functions')

Alias(DEBUG_LIB_ALIAS, debugTarget)
Alias(RELEASE_LIB_ALIAS, releaseTarget)
Alias (CREATE_LIB_ALIAS, [debugTarget, releaseTarget])
Alias(DOXYGEN_ALIAS, doxygenTarget)
Alias(CPP_CHECK_ALIAS, cppCheckTarget)
Alias(UNIT_TEST_ALIAS, unitTestTarget)
Alias(RUN_TEST_ALIAS, [unitTestTarget, cppCheckTarget, runTestTarget])

Alias (NIGHTLY_ALIAS, [debugTarget, releaseTarget, doxygenTarget, cppCheckTarget, runTestTarget, netBeansTarget, vsTarget, codeBlocksTarget])
Alias (DELTA_ALIAS, [debugTarget, releaseTarget, cppCheckTarget, runTestTarget])

Default([RUN_TEST_ALIAS])

