import SCons.Defaults
import SCons
from SCons.Util import unique
import stat
import os
import sys
import subprocess
import glob
import shutil
from copy import deepcopy

baseDir = os.path.abspath("../../")
sys.path.append(baseDir) #Get globals
from Globals import *
from SConstructGlobals import parseArguments
from SkyvoCommonGlobals import *

armBuild = parseArguments(ARGUMENTS)

from SConstructGlobals import *

###
# Files to compile
###

###include paths:
includePaths = [includeDir, getDateVersionPath(baseDir)]
testIncludePaths = [os.path.join(testDir, includeDir)]

###Source Files
dateVersionFile = (os.path.join(srcDir, 'SkyvoOSDateVersion.cpp'))
sourceFiles = filterSourceFiles(glob.glob(os.path.join(srcDir, "*.cpp")), [dateVersionFile])
sourceTestFiles = glob.glob(os.path.join(testDir, "*.cpp")) + glob.glob(os.path.join(testDir, srcDir, "*.cpp"))
coverageFiles = deepcopy(sourceFiles + [dateVersionFile])

###Libs
libs = []
testLibs = ["pthread"] + libs

###libPath
libPath = []

Help(
'''
SConstruct file for Skyvo OS project

Targets:
    debug_lib      Builds the project for Debug lib (Default)
    release_lib    Builds the project for Release lib
    create_lib     Builds both the debug and release libs
    doxygen        Builds the doxygen documentation
    unit_test      Builds the project for Unit Tests
    run_test       Builds and runs the Unit Tests and memcheck and coverage
'''
)

###
# Environment creation
###

#Make common environment
envBase = createBaseEnvironment(baseDir, armBuild)

#Debug Environment
debugEnvironment = createDebugEnvironment(envBase, includePaths, libs, libPath)

#Release Environment
releaseEnvironment = createReleaseEnvironment(envBase, includePaths, libs, libPath)

#Unit test environment
testEnvironment = createUnitTestEnvironment(envBase, includePaths + testIncludePaths, testLibs, libPath)

#Doxygen
doxygenFiles = [dateVersionFile] + sourceFiles + sourceTestFiles + glob.glob(os.path.join(includeDir, "*h")) + glob.glob(os.path.join(testDir, includeDir, "*h"))

###
# Test outputs
###
createTestOutputFolder(envBase)

#make unEditableFile.txt and uneditableDir unwritable, and unReadableFile.txt unreadable
try:
    os.chmod(os.path.join(".", "Test", "unEditableFile.txt"), stat.S_IREAD)
    os.chmod(os.path.join(".", "Test", "unReadableFile.txt"), 0)
except OSError:
    pass

###
# Targets
###

debugTarget = createStaticLib(debugEnvironment, "SkyvoOS-d", getCompiledObjectsWithDateVersionObject(debugEnvironment, sourceFiles, dateVersionFile, ARGUMENTS))
releaseTarget = createStaticLib(releaseEnvironment, "SkyvoOS", getCompiledObjectsWithDateVersionObject(releaseEnvironment, sourceFiles, dateVersionFile, ARGUMENTS))
(unitTestTarget, runTestTarget) = createUnitTestExe(testEnvironment, getCompiledObjectsWithDateVersionObject(testEnvironment, sourceFiles + sourceTestFiles, dateVersionFile, ARGUMENTS), coverageFiles, armBuild)
doxygenTarget = createDoxygenTarget(envBase, doxygenFiles)

if (not armBuild):
    Depends(runTestTarget, unitTestTarget)

Alias("debug_lib", debugTarget)
Alias("release_lib", releaseTarget)
Alias ("create_lib", [debugTarget, releaseTarget])
Alias("doxygen", doxygenTarget)
Alias("unit_test", unitTestTarget)
Alias("run_unit_test", runTestTarget)
Alias("run_test", [unitTestTarget, runTestTarget])

#used by auto build
if (armBuild):
    print("WARNING! Unit tests are not going to be run on an ARM nightly/delta build")
    Alias ("nightly", [debugTarget, releaseTarget, doxygenTarget, unitTestTarget])
    Alias ("delta", [releaseTarget, unitTestTarget])
else:
    Alias ("nightly", [debugTarget, releaseTarget, doxygenTarget, runTestTarget])
    Alias ("delta", [releaseTarget, runTestTarget])

Default([debugTarget])
