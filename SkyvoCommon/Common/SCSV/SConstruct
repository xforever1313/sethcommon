import SCons.Defaults
import SCons
from SCons.Util import unique
import stat
import os
import sys
import subprocess
import glob
import shutil
from copy import deepcopy

baseDir = os.path.abspath("../../")
sys.path.append(baseDir) #Get globals
from Globals import *
from SkyvoCommonGlobals import *
from SConstructGlobals import *

#Make common environment
envBase = createBaseEnvironment(baseDir, ARGUMENTS)

#additional flags
testLinkFlags = []
if (envBase['ASM_JS_BUILD']):
    testLinkFlags += ['--embed-file', os.path.join(testDir, 'SCSVTestfiles')]

###
# Files to compile
###

###include paths:
includePaths = [includeDir,  getDateVersionPath(baseDir)]
testIncludePaths = [os.path.join(testDir, includeDir)]

###Source Files
dateVersionFile = os.path.join(srcDir, "SCSVDateVersion.cpp")
sourceFiles = filterSourceFiles(glob.glob(os.path.join(srcDir, "*.cpp")), [dateVersionFile])
sourceTestFiles = glob.glob(os.path.join(testDir, "*.cpp")) + glob.glob(os.path.join(testDir, srcDir, "*.cpp")) + [getTestMain(baseDir)]
coverageFiles = deepcopy(sourceFiles + [dateVersionFile])
    
###Libs
libs = []

###libPath
libPath = []

Help(
'''
SConstruct file for SCSV project

Targets:
    debug          Builds the project for Debug lib (Default)
    release        Builds the project for Release lib
    create_lib     Builds both the debug and release libs
    doxygen        Builds the doxygen documentation
    cpp_check      Runs cppcheck on the source files
    unit_test      Builds the project for Unit Tests
    run_test       Builds and runs the Unit Tests and memcheck and coverage
'''
)

###
# Environment creation
###

#Debug Environment
debugEnvironment = createDebugEnvironment(envBase, includePaths, libs, libPath)

#Release Environment
releaseEnvironment = createReleaseEnvironment(envBase, includePaths, libs, libPath)

#Unit test environment
testEnvironment = createUnitTestEnvironment(envBase, includePaths + testIncludePaths, libs, libPath)
testEnvironment.Append(LINKFLAGS = testLinkFlags)

###Doxygen
doxygenFiles = [dateVersionFile] + sourceFiles + sourceTestFiles + glob.glob(os.path.join(includeDir, "*h")) + glob.glob(os.path.join(testDir, includeDir, "*h"))

###
# Test outputs
###
createTestOutputFolder(envBase)
    
###
# Targets
###

debugTarget = createStaticLib(debugEnvironment, "SCSV-d", getCompiledObjectsWithDateVersionObject(debugEnvironment, sourceFiles, dateVersionFile, ARGUMENTS))
releaseTarget = createStaticLib(releaseEnvironment, "SCSV", getCompiledObjectsWithDateVersionObject(releaseEnvironment, sourceFiles, dateVersionFile, ARGUMENTS))
(unitTestTarget, runTestTarget) = createUnitTestExe(testEnvironment, getCompiledObjectsWithDateVersionObject(testEnvironment, 
                                                                                                             sourceFiles + sourceTestFiles, 
                                                                                                             dateVersionFile, 
                                                                                                             ARGUMENTS), 
                                                    coverageFiles)
doxygenTarget = createDoxygenTarget(envBase, doxygenFiles)
cppCheckTarget = createCppCheckTarget(releaseEnvironment, coverageFiles)

Alias("debug_lib", debugTarget)
Alias("release_lib", releaseTarget)
Alias ("create_lib", [debugTarget, releaseTarget])
Alias("doxygen", doxygenTarget)
Alias("cpp_check", cppCheckTarget)
Alias("unit_test", unitTestTarget)
Alias("run_unit_test", runTestTarget)
Alias("run_test", [unitTestTarget, cppCheckTarget, runTestTarget])

Alias ("nightly", [debugTarget, releaseTarget, doxygenTarget, cppCheckTarget, runTestTarget])
Alias ("delta", [debugTarget, releaseTarget, cppCheckTarget, runTestTarget])

Default([debugTarget])
